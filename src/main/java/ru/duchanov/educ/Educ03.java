package ru.duchanov.educ;

import java.util.*;

public class Educ03 {
    public static void main(String[] args){
        Integer[] array = {1,2,3,4325345,2324};
        Integer integer = array[4];
        array[2]=1;
        // преимущество массива - постоянная скорость получения элемента по индексу(обращения по индексу)
        // алг сложность в массиве при обращении по индексу = 1


        //Интерфейсы коллекций

        Collection<String> collection;
        List<String> list;
        //РАботает с элементами по индексу,
        // это упорядоченный набор элементов,
        // не уникальные элемменты,
        // может расти (в полтора при переполнении создается новый массив бОльшего размера, в который копируется эл-еы
        //          старого массива, ссылка на старый массив затирается)
        // быстрое добавление в конец быстрая индексашия, малый размер

        Set<Integer> set;
        //нет понятия "индекс"
        // внутри сета все элементы уникальны (уникальность зависит от деталей рализации сета)
        // сет устроен на основе хеш-таблиц
        // ХТ основана на массиве переменной длины
        //  элементы кладутся по индексу в зависимости от значения
        //  есть значение и длина массива - просто делим значение по модулю длины массива(находим остаток деления значения
        //  на длину массива) получаем индекс в который пишется значение
        //  loadFactor для Java = 0,75 , т.е. при количестве эл-ов = 0,75 от его длины, массив увеличивается вдвое

        //  нет индексир доступа нет порядка.
        // преобразование Objectв int происходит по хэшкоду
        // для каждого класса, испоьзуемого в сэте можно неализовать методы
        //      equals
        //      hashCode
        // если по хэшу объекты попали в один бакет надо будет сравнивать объекты внутри листа по equals

        Map<String, List<Integer>> map;
        // ключ/значение
        // тот же Set но сбоку (set - Map с заглушкой)
        // Реализации:
            //TreeMap все ключи всегда в отсортированном порядке
//                быстрое добавление

        Queue<Double> doubles;
        //Хорошая практика - писать не сразу класс, а сначала интерфейс для класса(просто перечисление методов)
    }
}
